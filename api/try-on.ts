import type { Handler } from "@netlify/functions";
import { GoogleGenAI, Modality } from "@google/genai";

// This function is now written using Netlify's native Handler format for maximum compatibility.
export const handler: Handler = async (event, context) => {
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            headers: { 'Allow': 'POST' },
            body: `Method ${event.httpMethod} Not Allowed`,
        };
    }

    try {
        if (!event.body) {
            return {
                statusCode: 400,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ error: 'Request body is empty.' }),
            };
        }

        // On Netlify, event.body is a string that needs to be parsed.
        const body = JSON.parse(event.body);
        const { personBase64, personMimeType, outfitBase64, outfitMimeType } = body;

        if (!personBase64 || !personMimeType || !outfitBase64 || !outfitMimeType) {
            return {
                statusCode: 400,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ error: "Missing required image data in request body." }),
            };
        }

        const API_KEY = process.env.API_KEY;
        if (!API_KEY) {
            console.error("API_KEY environment variable not set on the server");
            return {
                statusCode: 500,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ error: "Server configuration error: Missing API key." }),
            };
        }

        const ai = new GoogleGenAI({ apiKey: API_KEY });
        const model = 'gemini-2.5-flash-image-preview';

        const prompt = `
            Virtual Try-On Task:
            1. The first image contains a person who will act as the model.
            2. The second image contains an outfit.
            3. Your task is to generate a new, photorealistic image of the person from the first image wearing the complete outfit from the second image.
            4. Preserve the person's original pose, background, face, and body features.
            5. The final image should only contain the person wearing the new outfit, without any extra text or annotations. Ensure the clothing fits naturally.
        `;

        const response = await ai.models.generateContent({
            model: model,
            contents: {
                parts: [
                    { inlineData: { data: personBase64, mimeType: personMimeType } },
                    { inlineData: { data: outfitBase64, mimeType: outfitMimeType } },
                    { text: prompt },
                ],
            },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });

        const imagePart = response.candidates?.[0]?.content?.parts?.find(
            (part) => part.inlineData
        );

        if (imagePart && imagePart.inlineData) {
            return {
                statusCode: 200,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ image: imagePart.inlineData.data }),
            };
        } else {
            const textPart = response.candidates?.[0]?.content?.parts?.find(
                (part) => part.text
            );
            const errorMessage = textPart?.text ?? "No image was generated by the API. The response may have been blocked or the format is unexpected.";
            console.error("Gemini API did not return an image:", errorMessage);
            return {
                statusCode: 500,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ error: `AI could not generate image: ${errorMessage}` }),
            };
        }
    } catch (error) {
        console.error("Error in API route:", error);
        const message = error instanceof Error ? error.message : 'An unexpected error occurred.';
        return {
            statusCode: 500,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ error: `Server error: ${message}` }),
        };
    }
};
